// Copies a BMP file

#include <stdio.h>
#include <stdlib.h>

#include "bmp.h"
// problem1: fwrite BITMAPFILEHEADER before BITMAPINFOHEADER --> solved
// problem2: resize the outfile
int main(int argc, char *argv[])
{
    // ensure proper usage
    if (argc != 4)
    {
        fprintf(stderr, "Usage: ./resize n infile outfile\n");
        return 1;
    }
    // remember n
    int n = atoi(argv[1]);
    if (n > 100 || n <= 0)
    {
        fprintf(stderr, "n must be a positive integer less than or equal to 100\n");
        return 2;
    }

    // remember filenames
    char *infile = argv[2];
    char *outfile = argv[3];

    // open input file
    FILE *inptr = fopen(infile, "r");
    if (inptr == NULL)
    {
        fprintf(stderr, "Could not open %s.\n", infile);
        return 3;
    }

    // open output file
    FILE *outptr = fopen(outfile, "w");
    if (outptr == NULL)
    {
        fclose(inptr);
        fprintf(stderr, "Could not create %s.\n", outfile);
        return 4;
    }

    // read infile's BITMAPFILEHEADER
    BITMAPFILEHEADER bf, newbf;
    fread(&bf, sizeof(BITMAPFILEHEADER), 1, inptr);
    newbf = bf;

    // read infile's BITMAPINFOHEADER
    BITMAPINFOHEADER bi, newbi;
    fread(&bi, sizeof(BITMAPINFOHEADER), 1, inptr);
    newbi = bi;

    // define newbi.biWidth and newbi.biHeight based on original values
    newbi.biWidth = n * bi.biWidth;
    newbi.biHeight = n * bi.biHeight;
    printf("bi.biWidth is: %i\n", bi.biWidth);
    printf("newbi.biWidth is: %i\n", newbi.biWidth);
    printf("bi.biHeight is: %i\n", bi.biHeight);
    printf("newbi.biHeight is: %i\n", newbi.biHeight);
    // ensure infile is (likely) a 24-bit uncompressed BMP 4.0
    if (bf.bfType != 0x4d42 || bf.bfOffBits != 54 || bi.biSize != 40 ||
        bi.biBitCount != 24 || bi.biCompression != 0)
    {
        fclose(outptr);
        fclose(inptr);
        fprintf(stderr, "Unsupported file format.\n");
        return 5;
    }

    // determine padding for scanlines, modify with n
    int padding = (4 - (bi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    int newpadding = (4 - (newbi.biWidth * sizeof(RGBTRIPLE)) % 4) % 4;
    printf("padding is: %i\n", padding);
    printf("newpadding is: %i\n", newpadding);

    //'resize' biSizeImage and bfSize
    newbi.biSizeImage = ((sizeof(RGBTRIPLE) * newbi.biWidth) + newpadding) * abs(newbi.biHeight);
    newbf.bfSize = newbi.biSizeImage + sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER);
    printf("newbi.biSizeImage is: %i\n",newbi.biSizeImage);
    printf("newbf.bfSize is: %i\n",newbf.bfSize);

    // write outfile's BITMAPFILEHEADER
    fwrite(&newbf, sizeof(BITMAPFILEHEADER), 1, outptr);

    // write outfile's BITMAPINFOHEADER
    fwrite(&newbi, sizeof(BITMAPINFOHEADER), 1, outptr);


    // iterate over pixels in scanline, or resize horizontally
    for (int i = 0, biHeight = abs(bi.biHeight); i < biHeight; i++)
    {
        for (int l = 0; l < n - 1; l++)
        {
            for (int j = 0; j < bi.biWidth; j++)
            {
                // temporary storage
                RGBTRIPLE triple;

                // read RGB triple from infile
                fread(&triple, sizeof(RGBTRIPLE), 1, inptr);

                // write RGB triple into outfile
                for (int m = 0; m < n; m++)
                {
                    fwrite(&triple, sizeof(RGBTRIPLE), 1, outptr);
                }
            }

            // send infile cursor back
            fseek(inptr, -(bi.biWidth), SEEK_CUR);

            // add newpadding into the outfile
            for (int k = 0; k < newpadding; k++)
            {
                fputc(0x00, outptr);
            }

        }

        // write pixels, padding to outfile
        for (int p = 0; p < bi.biWidth; p++)
        {
            // temporary storage
            RGBTRIPLE newtriple;

            // read RGB triple from infile
            fread(&newtriple, sizeof(RGBTRIPLE), 1, inptr);

            // write RGB triple into outfile
            for (int q = 0; q < n; q++)
            {
                fwrite(&newtriple, sizeof(RGBTRIPLE), 1, outptr);
            }
        }

        // add newpadding into the outfile
        for (int t = 0; t < newpadding; t++)
        {
            fputc(0x00, outptr);
        }
        // skip over padding, if any
        fseek(inptr, padding, SEEK_CUR);
    }

    // close infile
    fclose(inptr);

    // close outfile
    fclose(outptr);

    // success
    return 0;
}
